{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Bold;
\f3\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;}
\margl120\margr120\vieww11160\viewh13820\viewkind0
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f0\fs20 \cf0 Copyright 1993, 1994, 2014 Kurt A. Stephens\

\f1 \

\f0\b\fs48 1. GGHC runtime interface functions:\

\f1\b0\fs20 \

\f0\fs24 These functions define the interface between the output of GGHC and the runtime system using the definitions.\
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\b\fs36 \cf0 1.1. Module definition blocks\

\f2\fs24 \
  void gghc_begin_module(const char *modulename);\
  void gghc_end_module(const char *modulename);\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f1\b0\fs20 \cf0 \

\f0\fs24   are called at the beginning and end of a module (or modules) ran through gghc.  The implementation can use this to notify the user of the modules being loaded or to place different modules into different namespaces.\

\f1\fs20 \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f0\b\fs36 \cf0 1.2. Intrinsic types, typedefs and type references\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f1\b0\fs20 \cf0 \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f0\b\fs32 \cf0 1.2.1. Intrinsic types\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\b0\fs24 \cf0 \
  The runtime system must predefine the following following intrinsic types:\
  \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f2\b \cf0   "char"\
  "unsigned char"\
  "short"\
  "unsigned short"\
  "int"\
  "unsigned int"\
  "long"\
  "unsigned long"\
  "long long"			
\f0\b0 (if supported by the C compiler)\

\f2\b   "unsigned long long"	
\f0\b0 (if supported by the C compiler)\

\f2\b   "float"\
  "double"\
  "long double"		
\f0\b0 (if supported by the C compiler)\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\b\fs32 \cf0 \
1.2.2. Typedefs\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f2\fs24 \cf0 \
  void gghc_typedef(const char *symbol, gghcT ctype);\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f1\b0\fs20 \cf0 \

\f0\fs24  binds a symbol to a C type object.  Generally the output of a typedef operation.\

\f1\fs20 \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f0\b\fs32 \cf0 1.2.3. Type references.\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f2\fs24 \cf0 \
  gghcT gghc_type(const char *typename);\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f1\b0\fs20 \cf0 \

\f0\fs24 is called when a type is required by name. Should raise an error if the type is not yet defined.\

\f1\fs20 \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f0\b\fs36 \cf0 1.3. Composite types\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\b0\fs24 \cf0 \
 An implementation is free to cache composite types to reduce memory and preserve pointer equality.\

\f1\fs20 \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f0\b\fs32 \cf0 1.3.1. Enumerations\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f2\fs24 \cf0 \
  gghcT gghc_enum_type(const char *enumname);\
  void gghc_enum_type_element(gghcT enumtype, const char *name, int enumvalue);\
  void gghc_enum_type_end(gghcT enumtype);\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f1\b0\fs20 \cf0 \

\f0\fs24  creates a new C enum type and binds 
\i enumname
\i0  to the type.  If the 
\i enumname
\i0  is "", the enum type is anonymous.\

\f1\fs20 \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f0\b\fs32 \cf0 1.3.2. Pointers\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f2\fs24 \cf0 \
  gghcT gghc_pointer_type(gghcT elementtype);\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f1\b0\fs20 \cf0 \

\f0\fs24  creates a C pointer type.\

\f1\fs20 \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f0\b\fs32 \cf0 1.3.2. Arrays\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f2\fs24 \cf0 \
  gghcT gghc_array_type(gghcT elementtype, unsigned int length);\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f1\b0\fs20 \cf0 \

\f0\fs24  creates a C array type of a given length. if the array is of an undetermined length, 
\f2\b length
\f0\b0  is -1.\

\f1\fs20 \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f0\b\fs32 \cf0 1.3.2. Structures and Unions\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f2\fs24 \cf0 \
  gghcT gghc_struct_type(const char *struct_or_union, const char *structname, size_t _sizeof);\
  void gghc_struct_type_element(gghcT structtype, gghcT elementtype, const char *elementname, gghc_funcp getfunc, gghc_funcp setfunc);\
  void gghc_struct_type_end(gghcT structtype);\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f1\b0\fs20 \cf0 \
  
\f2\b\fs24 gghc_struct_type()
\f0\b0  returns a uninitialized C struct type and binds the supplied name to the type.  If the name is "", the struct type is anonymous.\
  \
  The return value will be used in any self-referencing C struct or union types declarations such as:\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f2\b \cf0 \
  struct somestruct \{\
    int foo;\
    struct somestruct *next;\
  \};\
  \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f0\b0 \cf0   For a structure of this type, gghc will generate:\
  \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f2\b \cf0   var = gghc_struct_type("somestruct", sizeof(struct somestruct));\
  gghc_struct_type_element(var, "foo", gghc_type("int"), ...);\
  gghc_struct_type_element(var, "next", gghc_pointer(var), ...);\
  gghc_struct_type_end(var);\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f0\b0 \cf0 \
  The 
\f2\b getfunc
\f0\b0  and 
\f2\b setfunc
\f0\b0  for each element are declared as:\
  \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f2\b \cf0   void (*getfunc)(
\f3\i\b0 <struct>
\f2\i0\b  *structp, 
\f3\i\b0 <elementtype>
\f2\i0\b  *dst);\
  void (*setfunc)(
\f3\i\b0 <struct>
\f2\i0\b  *structp, 
\f3\i\b0 <elementtype> 
\f2\i0\b *src);\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f0\b0 \cf0   \
  Where 
\f3\i <struct> 
\f0\i0 and
\f3\i  <elementtype>
\f0\i0  are the C types of the struct and element respectively.\
  \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\b\fs32 \cf0 1.3.2. Functions\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f1\b0\fs20 \cf0  \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f2\b\fs24 \cf0   gghcT gghc_function_type(gghcT rtntype, gghcT argtype, ...);\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f1\b0\fs20 \cf0 \

\f0\fs24   creates a C function type object with a return and a list of required argument types.  The argument type list is terminated with a 
\f2\b gghcT_NULL
\f0\b0  object.  If the function takes a variable number of arguments the argument type list is terminated with a 
\f2\b gghcT_VARARGS
\f0\b0  type object.\

\f1\fs20  \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f0\b\fs36 \cf0 1.4. Globals\

\f2\fs24 \
  void gghc_global(const char *symbol, gghcT ctype, void *address);\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600

\f1\b0\fs20 \cf0 \

\f0\fs24  binds symbol to a new C object at an address.   This is called for each variable, array and function declaration.\

\f1\fs20 \
}
